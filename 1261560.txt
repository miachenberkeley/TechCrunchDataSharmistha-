
Martin Puryear a lead instructor and principal engineer at Coding Dojo, a 14-week coding bootcamp that teaches full-stack development.There has never been a more exciting time for technologists and developers worldwide. The number of active development languages and frameworks, as well as development tools and learning avenues, continues to soar.Despite all these resources at our fingertips (or perhaps because of this abundance), it may not be obvious where industry trends are leading us. In my role as a coding bootcamp instructor, Im constantly exposed to whats empowering the latest and greatest technology. Here iswhat to look out for in programming trends over the next year.Officially released in June 2015, the latest version of ECMAScript (ES6) better known by most as JavaScript is poised to make one of the biggest splashes in web development since the previous version (ES5) was released in 2009.JavaScript is the worlds most prevalent programming language, with nearly every personal computer and mobile device with a web browser capable of running JavaScript. Thus, the impact of ES6, and the slew of new features it brings to modern web development, is likely to be quite massive.Among these features are block-scoped variables and functions, constants, arrows to simplify closure syntax, string interpolation, classes, modulesand much more.This latest version of JavaScript is quickly gaining support in popular browsers. Microsoft Edge version 13 leads the way with nearly 80 percent of features supported. This yearwill certainly see feature support within Edge, Chrome and Firefox continue to climb dramatically.Meanwhile, developers can begin using the majority of what ES6 has to offer by using a transpiler, such as Babel, to compile ES6 code into fully compatible ES5 JavaScript that works in modern browsers.Over the coming years, modern development will continue to shift away from creating fully enclosed, totally self-managed applications. Rather, development will increasingly concentrate on utilizing third-party services to handle a large chunk of the monotonous yet necessary aspects of the project, such as cloud storage, push notifications and user administration.Backend as a Service (BaaS) is a common nomenclature for these utilities, and their popularity is guaranteed to rise, particularly in the enterprise space where scalability poses a huge burden for large applications. With a BaaS likeParse, engineering and operations teams can focus on setting the company apart from its competition, while baseline features and their associated overhead are handled by another party entirely.Although Backend as a Service is meeting the developer need to easily link projects to cloud storage and social networking APIs, many applications still rely on localized development stacks and well-provisioned servers to function properly. Unfortunately, server provisioning is inherently difficult and time-consuming. Not surprisingly, we see a meteoric rise in automated provisioning and containers.Services such as Packer and Docker allow engineers to quickly generate machine images with explicit versions of OS, libraries, languages and frameworks. These machine images, called containers, are easily replicated to expand existing services or to quickly create new ones. If your operations team isnt already talking about this topic, itshould be. If it is, and you havent been listening, you should be.As modern applications require ever more bandwidth, storage and processing, it is clear that single-machine models cannot scale to match these requirements (and havent for some time).To truly scale a system, one should parallelize it as much as possible, leading to a rising need for functional programming languages such as Haskell,Clojure, Scala and Erlang. Accordingly, there is increasing need for developers who are capable and productive in these technologies.Whereimperative programming relies heavily on mutable state (changing an objects value during execution), functional programming focuses on immutable state, in which a declared object retains its value throughout the process. Functional languages, therefore, provide a massive benefit over common imperative or object-oriented languages: they are inherently designed to support parallelism and heavy concurrency.If you, as a developer, know with certainty that your data isnt altered during execution, and that your functions are transitive (effectively unchanging), your application can benefit from the increased scale and distributed computing made easier by a functional language.Object-oriented programming will remain an industry staple for years to come, but there is little doubt that, as users expect faster search results and researchers expect more accurate calculations, functional programming will gain limelight as a clear and obvious solution.Flat design has been all the rage in recent years as a minimalist approach to modern UI creation, but 2016 may bring a focus toward material design. Apple has been a big proponent of flat design, which shies away from stylistic elements that appear three-dimensional. Microsoft got there first with the Metro design introduced 10years ago by Zune, then Windows Phone 7 and today with Windows 10.It is fitting then that one of Apples and Microsofts biggest competitors, Google, launched the trend towardmaterial design. With three-dimensional depth effects such as gradients and lighting design, this new look gives a bit of depth back to digital components. Drop shadows, for example, allow applications to more easily indicate whether an element is clickable or inactive.As material design shifts to the forefront this year, were likely to see a proliferation of new UI design patterns, ascreatives (software designers) continue to embrace responsive design.Web UI in particular may become more and more similar, but this isnt a bad thing. On the contrary, designers are embracing an understanding that common tasks, such as login screens and navigation menus, need to look and feel familiar to users of all sorts.This will be an exciting year for web software, from the bottom foundation technologies all the way to the user experience. With ECMAScript6, a ubiquitous web language gets an update. With BaaS and deployment containers, much of the cost and headache of basic features and provisioning can be removed. Functional languages move toward the mainstream and reframe how we approach parallelism.Material design aims to give more life to user elements, and new common frameworks may unite user experiences across devices. Regardless of engineering focus or industry, take a good look at the benefits these new developments might offer you.