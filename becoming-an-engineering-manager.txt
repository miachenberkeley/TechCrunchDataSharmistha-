Editors Note:Noah Brier is the co-founder of Percolate, a New York-based marketing technology start-up,and is a member of the World Economic Forum Global Agenda Council on Social Media. Over the last few years Ive gotten the pleasure to work with a large number ofreally talented engineers  some of whom Ive asked to make the leapinto management.Like any individual contributor moving into a new role, theyreasked to fundamentally change the way they approach their day. As Ive done mybest to coach them through this experience, I wrote down a few ideas on how tobest translate their engineering skills into management skills. Some of theseare very specific to managing engineers, but most are general observations thatshould be applicable to managing just about anyone in a growing company.PragmatismI tell this story a lot now, but the main difference I see between a junior andsenior engineer is their ability to be pragmatic. A junior engineer looks at aproblem with bravado and says, I know exactly what the problem is, and setsout to solve it. A senior engineer looks a problem with pragmatism and says, Idont know exactly the problem is, but I know where to look to understand it,and begins to dig in to the data.The metaphor I like to use is that every bug or challenge looks like a tree: Youhave a trunk with branches of possibilities. The junior engineer is startingfrom the top of the tree, at an individual branch, and trying to work their waydown, while the senior engineer starts at the trunk, cutting off large portionsof the tree at a time as a way to eliminate possibilities.As a manager a big part of what you are is a teacher and a big part of what youcan teach is pragmatism: How to look at problems and solve them in the mostlogical way possible. Obviously everyone has a little bit of a different style,and the key to being a manager is to not stifle that while also helping thembecome better at their jobs.Systems/ScaleEvery great engineer Ive ever met is naturally a systems thinker: They alwaysthink about how to build things in a scalable way.Essentially the job of beinga manager, beyond the human side (which Ill get to, I swear), is about buildinga system of people. As youregrowing a company you should absolutely be thinkingabout how to make this system scalable. On this point, specifically, you need tothink about every decision and task you take control of and how that would workif you had 20 more people reporting to you. Micromanagement, in other words, isbad engineering on your part, not bad behavior on the part of the employeeyoure managing (no matter how much you think you could solve that problembetter or faster).Now obviously people perform differently than code, but thats just a variableyou need to include in your calculations in the same way you would think aboutthe speed of servers or the functionality of Python versus Go. In the same way Iwould expect you to understand the strengths and weaknesses of the language youchoose, you should understand the strengths and weakness of the individuals onyour team. Thats on the manager to understand, not the person to communicate.(Ill talk more about this in the next section.)One last point on scalability: Every time you solve a problem for the company orteam you should be thinking about how do you incorporate that solution into thesystem. If its a process change then you need to ask yourself both how youregoing to communicate/enforce that change for current employees, but also how youwill communicate/enforce that change for the employees who you havent hiredyet. This could be as simple as documentation, but the key is to make sure
youve considered the question.MotivationThis is less something Ive learned from working with engineers and more something Ive learned from being a manager. The key, I believe, to being agreat manager is to understand what motivates the people who are reporting to you.For every person on your team you should know their strengths, weaknesses,and, most importantly, what drives them to come to work every day. From there you need to try and calibrate the way you work with that person based on thatmotivation. This can play out in a number of different ways: Some people are motivated by recognition, others by fear, others by the pure desire to solvereally hard problems. Understanding which one of these (and there are many more) motivates an employee will make your job of managing them much easier.The thing about getting to motivation is that you need to move beyond the analytics and actually start to know the person. That means 1-on-1s and otherconversations that arent exclusively about work (after all, they might be motivated by things that dont happen in the office). You should be checking inwith your direct reports weekly both to build a good rapport as well as to get to know them on a deeper level.Something Assigned To Everyone Is Assigned To No OneThis is not something particular to engineering, but I still think its a useful lesson as youre transitioning to being a manager. As a general rule giving agroup something to do will mean it wont get done. If you want to ensure things are done you need to make someone responsible. This is pretty obvious, but stillworth stating.In the end, the transition from individual contributor to manager is tough in just about any discipline. However, as I hope Ive articulated, despite theirreticence, engineers are actually better prepared for management than almost anyone else in the organization. The transition wont be easy and managementcertainly isnt for everyone, but hopefully this helps a little bit.