
Ty Rollin is CTO of Mobiquity.Theres a lot of bad code out there. And its causing major problems for companies that are looking to build a more mobile-centric, transformational architecture.Specifically, bad code causes projects to take more time, more money and more resources (aka Software Crisis)  which is repeated over and over and over unless a company revisits and updates the long-standing practices it has adopted.But it starts with the culture  and there is some serious clashing taking place.When I started my career in digital, large groups of people were writing code for no sake. And nothing was human-centered. But everyone else including those who were building the products  was taking a customer-centered approach to development. This has led to a clash in corporate culture today.In large part, unacceptable code has come about because companies are rushing to market too quickly and engineering is de-coupled from the true end goal of satisfying users. It is a systematic issue, even though many think the solution lies in putting cross-functional teams in charge of product delivery. Typically, youll find your developers wasting time on CRUD operations and other no-value plumbing activities.Mitigating the coding problems takes proactivity: keeping code current and slowly debugging or paying off the existing bad code technical debt. This also means biting off only what you can chew in app development  and spending time on customer-valued features.Code smells  a common term in the developer world are hints that something has gone wrong somewhere in the code. Usually, its a symptom that indicates a deeper problem, pointing out weaknesses in design that may behampering development or even increasing risk of failure. Heres a look at how to mitigate (or eliminate) bad code smells, from both a technical and process standpoint:Eliminating bad code smells requires a new mindset. In todays enterprise, product managers have a lot of power and a composite of responsibilities. The fast pace of work requires small iterations and continuous deployment, while supplying a high-quality product. Being capable of delivering at that speed means you need a cross-functional team whose mindset has shifted: their goal is delivering for their customer.As software turns into functions (i.e., if this, then that) and innovation in IoT explodes, less code is actually being written. Single-function applications are becoming more common: apps that have very little code but are valuable and able to do more. Shockingly, there hasnt been a whole lot written on this topic, but I suspect in the future a person with an idea might not have to go through a software engineer to turn it into a functional product.Until then, the path to mobile transformation is littered with bad code. For companies both large and small, projects will consume resources until bad code practices are eliminated.