
Joel R. Putnam uses communications and technology to learn from and help organizations in education and international development. The tech geeks are coming to government. Whether theyre in our cities as Code for America volunteers or part of the federal U.S. Digital Service and 18F (hailed by Fast Company as Obamas Stealth Startup), programmers, data scientists and UX designers are starting to find their place in the public sector.This is a good thing. The more accomplished technology professionals devoting their talents to public service, the better. However, theres a potential problem. Tech professionals in government are in for a serious culture clash.Government writ large has generally been labeled by tech professionals in the private sector as hopeless and its culture, frankly, backward. Any number of online comment threads going back to the launch of healthcare.gov (or even long before that) make this pretty clear.Some programmers publicly say government is so behind the times that they feel taking a job there would atrophy their own skills, almost like a contagion that working there for more than a year would make it impossible for them to keep up their skill setto the level of the civilized world back in Silicon Valley.Even one government engineer otherwise happy with the public sector says that her skills have atrophied to the point that (she) would probably have to take an entry level position in the private sector.So this leaves us with an interesting situation. One of technologys great goals is to help society and the people in it. It turns out theres another group of people whove devoted their entire careers toward that: Theyre called public servants. So youd expect technologists and government officials to have some of the same goals. But the attitude many tech geeks have to government can be patronizing at best  and open contempt atworst.Heres the surprising thing most people on both sides havent noticed yet. While youd be forgiven for thinking this is an entirely new situation with no precedent thanks to, say, the Internet, smartphones, machine learning or any number of other technological advances, youd be flat-out wrong. We have seen something a lot like this situation before  and weknow how it plays out. Weve made some serious mistakes from which we have learned, and we can apply the same lessons today.Where have we seen this situation before? In the world of international aid.The parallel isnt precise, but it exists. In older, less-enlightened international aid scenarios, the professionals who came from rich countrieshad a very clear preconceived idea of what needed to be solved. They engaged with the poor countrys government and people, spending a minimum of effort trying to understand local history and culture and assuming lots of stereotypes (inefficiency, laziness, a love of red tape, inability to do anything), which ended up offending the people they wanted to help and harming much of their efforts to do good.The pattern is so common that entire books have been published on the topic, with titles like The Tyranny of Experts.Substitute tech professionals for aid workers and government bureaucrats for locals and you have a common attitude many tech professionals take with government. The engineers wondering why their obvious solution isnt being adopted really arent that different from the development economists wondering why the people in poor countries arent behaving rationally. Call it The Tech Geeks Burden if you like. Its a fast way to alienate many of the career civil servants those in tech want to assist.There is, however,an important and very useful difference: Even if internet professionals have only just started coming to help government, foreign aid has been around at least since the Marshall Plan that helped rebuild Europe in the 1940s and 1950s.While its far from perfect, international aid has learned a few things to which tech professionals joining government might want to pay attention. Even if you think you have the answer to all the problems on arrival, youre probably wrong. The problems you will be facing on the ground are inevitably more complex than youve realized. More importantly, if you drop in and tell people who have committed their lives to serving their community that theyre doing it wrong and they all need to stop being dumb and listen to you, youre either going to get sent home in short order or wind up wishing you had been. Ditch the preconceptions about culture. Most of what you know about theplace youre going, and its people,has been shaped by media that are in the business of telling exciting and controversial stories, not reporting the often-dull truth. Some of what youve heard about inefficiency, graft or laziness relative to your culture may seem like its true at first. But if youre going to get anything done, youre going to have to take the time to build relationships with the people with whom youre workingto learnabout their reality and what they value, especially the things you hadnt thought of before. Pay attention not only to whats wrong but how and why it came to be that way. You will spot inefficiencies as soon as you start your work. But even if you can change them by the flick of a switch, you willsave time and trouble in the long run if you first find out who relies on the system to be the way it is currently and make sure their needs are met. You can find out a lot of this by getting curious about the history of what youre seeing. If youre starting something new, think carefully about who is going to maintain it after you leave. Good programmers know this already, but writing a new application is a lot easier than fixing a broken application. Similarly, in aid projects built using foreign expertise and parts, once the engineers leave and the system breaks, the community can be left without not only the new system, but also the old one they abandoned in place of the new system. In other words, if you create something new to replace something old, if and when it breaks, you can leave people worse off than when you arrived  unless youve made sure that someone there can fix any problems that arise. Make sure youre not replicating something that has already quietly failed. Failure often goes unreported, especially in places that rely on success stories to get funded. Engineers Without Borders David Damberger gave a brilliant TED talk on this point about a water pump system he helped install in Malawi. When they came back a year later they found that not only had it broken, but they discovered something they hadnt noticed the first time: a bunch of other broken water pump systems that other groups had installed years before. If youre going to make something, ask around to make sure the broken remnants of someone elses attempts arent lying around, and, if they are, try to see what you can learn from their mistakes.In short, if you are coming from a tech background and using your talents in public service, you can improve the lives of huge numbers of citizens. But youre going to be a lot better at it if you recognize that youre coming into a place with its own culture and history that does not need to be replaced by the one youre used to. Take the time to work with the people you meet and understand where theyre coming from and your work will be far more efficient, effective and durable in the long run.